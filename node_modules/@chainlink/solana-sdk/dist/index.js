"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OCR2Feed = exports.CHAINLINK_STORE_PROGRAM_ID = exports.CHAINLINK_AGGREGATOR_PROGRAM_ID = void 0;
const tslib_1 = require("tslib");
const anchor = (0, tslib_1.__importStar)(require("@project-serum/anchor"));
const anchor_1 = require("@project-serum/anchor");
const web3_js_1 = require("@solana/web3.js");
exports.CHAINLINK_AGGREGATOR_PROGRAM_ID = new web3_js_1.PublicKey("cjg3oHmg9uuPsP8D6g29NWvhySJkdYdAo9D25PRbKXJ");
exports.CHAINLINK_STORE_PROGRAM_ID = new web3_js_1.PublicKey("HEvSKofvBgfaexv23kMabbYqxasxU3mQ4ibBMEmJWHny");
class OCR2Feed {
    constructor(aggregatorProgram, provider) {
        this.aggregatorProgram = aggregatorProgram;
        this.provider = provider;
        this._parser = new anchor.EventParser(aggregatorProgram.programId, aggregatorProgram.coder);
    }
    static async load(programID = exports.CHAINLINK_AGGREGATOR_PROGRAM_ID, provider = anchor.AnchorProvider.env()) {
        const aggregatorProgram = await anchor.Program.at(programID, provider);
        return new OCR2Feed(aggregatorProgram, provider);
    }
    onRound(feed, callback) {
        return this.provider.connection.onLogs(feed, (event, ctx) => {
            this._parser.parseLogs(event.logs, (log) => {
                if (log.name != "NewTransmission") {
                    return;
                }
                let parsed = OCR2Feed.parseLog(log);
                parsed.feed = feed;
                parsed.slot = ctx.slot;
                callback(parsed);
            });
        });
    }
    async removeListener(listener) {
        return this.provider.connection.removeOnLogsListener(listener);
    }
    static parseLog(log) {
        if (!log || !log.data)
            return null;
        let answer;
        if (log.data.answer)
            answer = new anchor_1.BN(log.data.answer, 10, "le");
        let roundId;
        if (log.data.roundId)
            roundId = log.data.roundId;
        let observationsTS;
        if (log.data.observationsTimestamp)
            observationsTS = new Date(log.data.observationsTimestamp * 1000);
        return {
            answer: answer,
            roundId: roundId,
            observationsTS: observationsTS,
        };
    }
}
exports.OCR2Feed = OCR2Feed;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDJFQUFnRDtBQUNoRCxrREFBMkM7QUFDM0MsNkNBQTRDO0FBRS9CLFFBQUEsK0JBQStCLEdBQUcsSUFBSSxtQkFBUyxDQUMxRCw2Q0FBNkMsQ0FDOUMsQ0FBQztBQUNXLFFBQUEsMEJBQTBCLEdBQUcsSUFBSSxtQkFBUyxDQUNyRCw4Q0FBOEMsQ0FDL0MsQ0FBQztBQVdGLE1BQWEsUUFBUTtJQUduQixZQUNXLGlCQUFpQyxFQUNqQyxRQUErQjtRQUQvQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQWdCO1FBQ2pDLGFBQVEsR0FBUixRQUFRLENBQXVCO1FBRXhDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUNuQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQzNCLGlCQUFpQixDQUFDLEtBQUssQ0FDeEIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDZixZQUF1Qix1Q0FBK0IsRUFDdEQsV0FBa0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUU7UUFFN0QsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN2RSxPQUFPLElBQUksUUFBUSxDQUFDLGlCQUFpQixFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTSxPQUFPLENBQUMsSUFBZSxFQUFFLFFBQWdDO1FBQzlELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUMxRCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQ3pDLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxpQkFBaUIsRUFBRTtvQkFDakMsT0FBTztpQkFDUjtnQkFDRCxJQUFJLE1BQU0sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNwQyxNQUFNLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztnQkFDbkIsTUFBTSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDO2dCQUN2QixRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbkIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsY0FBYyxDQUFDLFFBQWdCO1FBQzFDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVNLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRztRQUN4QixJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQztRQUNuQyxJQUFJLE1BQVUsQ0FBQztRQUNmLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNO1lBQ2pCLE1BQU0sR0FBRyxJQUFJLFdBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQW9CLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzNELElBQUksT0FBZSxDQUFDO1FBQ3BCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPO1lBQUUsT0FBTyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBaUIsQ0FBQztRQUMzRCxJQUFJLGNBQW9CLENBQUM7UUFDekIsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLHFCQUFxQjtZQUNoQyxjQUFjLEdBQUcsSUFBSSxJQUFJLENBQ3RCLEdBQUcsQ0FBQyxJQUFJLENBQUMscUJBQWdDLEdBQUcsSUFBSSxDQUNsRCxDQUFDO1FBQ0osT0FBTztZQUNMLE1BQU0sRUFBRSxNQUFNO1lBQ2QsT0FBTyxFQUFFLE9BQU87WUFDaEIsY0FBYyxFQUFFLGNBQWM7U0FDdEIsQ0FBQztJQUNiLENBQUM7Q0FDRjtBQXpERCw0QkF5REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhbmNob3IgZnJvbSBcIkBwcm9qZWN0LXNlcnVtL2FuY2hvclwiO1xuaW1wb3J0IHsgQk4gfSBmcm9tIFwiQHByb2plY3Qtc2VydW0vYW5jaG9yXCI7XG5pbXBvcnQgeyBQdWJsaWNLZXkgfSBmcm9tIFwiQHNvbGFuYS93ZWIzLmpzXCI7XG5cbmV4cG9ydCBjb25zdCBDSEFJTkxJTktfQUdHUkVHQVRPUl9QUk9HUkFNX0lEID0gbmV3IFB1YmxpY0tleShcbiAgXCJjamczb0htZzl1dVBzUDhENmcyOU5Xdmh5U0prZFlkQW85RDI1UFJiS1hKXCJcbik7XG5leHBvcnQgY29uc3QgQ0hBSU5MSU5LX1NUT1JFX1BST0dSQU1fSUQgPSBuZXcgUHVibGljS2V5KFxuICBcIkhFdlNLb2Z2QmdmYWV4djIza01hYmJZcXhhc3hVM21RNGliQk1FbUpXSG55XCJcbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm91bmQge1xuICBmZWVkOiBQdWJsaWNLZXk7XG4gIGFuc3dlcjogQk47XG4gIHJvdW5kSWQ6IG51bWJlcjtcbiAgb2JzZXJ2YXRpb25zVFM6IERhdGU7XG5cbiAgc2xvdDogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgT0NSMkZlZWQge1xuICBwcml2YXRlIF9wYXJzZXI6IGFuY2hvci5FdmVudFBhcnNlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICByZWFkb25seSBhZ2dyZWdhdG9yUHJvZ3JhbTogYW5jaG9yLlByb2dyYW0sXG4gICAgcmVhZG9ubHkgcHJvdmlkZXI6IGFuY2hvci5BbmNob3JQcm92aWRlclxuICApIHtcbiAgICB0aGlzLl9wYXJzZXIgPSBuZXcgYW5jaG9yLkV2ZW50UGFyc2VyKFxuICAgICAgYWdncmVnYXRvclByb2dyYW0ucHJvZ3JhbUlkLFxuICAgICAgYWdncmVnYXRvclByb2dyYW0uY29kZXJcbiAgICApO1xuICB9XG5cbiAgc3RhdGljIGFzeW5jIGxvYWQoXG4gICAgcHJvZ3JhbUlEOiBQdWJsaWNLZXkgPSBDSEFJTkxJTktfQUdHUkVHQVRPUl9QUk9HUkFNX0lELFxuICAgIHByb3ZpZGVyOiBhbmNob3IuQW5jaG9yUHJvdmlkZXIgPSBhbmNob3IuQW5jaG9yUHJvdmlkZXIuZW52KClcbiAgKTogUHJvbWlzZTxPQ1IyRmVlZD4ge1xuICAgIGNvbnN0IGFnZ3JlZ2F0b3JQcm9ncmFtID0gYXdhaXQgYW5jaG9yLlByb2dyYW0uYXQocHJvZ3JhbUlELCBwcm92aWRlcik7XG4gICAgcmV0dXJuIG5ldyBPQ1IyRmVlZChhZ2dyZWdhdG9yUHJvZ3JhbSwgcHJvdmlkZXIpO1xuICB9XG5cbiAgcHVibGljIG9uUm91bmQoZmVlZDogUHVibGljS2V5LCBjYWxsYmFjazogKHJvdW5kOiBSb3VuZCkgPT4gdm9pZCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucHJvdmlkZXIuY29ubmVjdGlvbi5vbkxvZ3MoZmVlZCwgKGV2ZW50LCBjdHgpID0+IHtcbiAgICAgIHRoaXMuX3BhcnNlci5wYXJzZUxvZ3MoZXZlbnQubG9ncywgKGxvZykgPT4ge1xuICAgICAgICBpZiAobG9nLm5hbWUgIT0gXCJOZXdUcmFuc21pc3Npb25cIikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcGFyc2VkID0gT0NSMkZlZWQucGFyc2VMb2cobG9nKTtcbiAgICAgICAgcGFyc2VkLmZlZWQgPSBmZWVkO1xuICAgICAgICBwYXJzZWQuc2xvdCA9IGN0eC5zbG90O1xuICAgICAgICBjYWxsYmFjayhwYXJzZWQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVtb3ZlTGlzdGVuZXIobGlzdGVuZXI6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLnByb3ZpZGVyLmNvbm5lY3Rpb24ucmVtb3ZlT25Mb2dzTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBwYXJzZUxvZyhsb2cpOiBSb3VuZCB7XG4gICAgaWYgKCFsb2cgfHwgIWxvZy5kYXRhKSByZXR1cm4gbnVsbDtcbiAgICBsZXQgYW5zd2VyOiBCTjtcbiAgICBpZiAobG9nLmRhdGEuYW5zd2VyKVxuICAgICAgYW5zd2VyID0gbmV3IEJOKGxvZy5kYXRhLmFuc3dlciBhcyBVaW50OEFycmF5LCAxMCwgXCJsZVwiKTtcbiAgICBsZXQgcm91bmRJZDogbnVtYmVyO1xuICAgIGlmIChsb2cuZGF0YS5yb3VuZElkKSByb3VuZElkID0gbG9nLmRhdGEucm91bmRJZCBhcyBudW1iZXI7XG4gICAgbGV0IG9ic2VydmF0aW9uc1RTOiBEYXRlO1xuICAgIGlmIChsb2cuZGF0YS5vYnNlcnZhdGlvbnNUaW1lc3RhbXApXG4gICAgICBvYnNlcnZhdGlvbnNUUyA9IG5ldyBEYXRlKFxuICAgICAgICAobG9nLmRhdGEub2JzZXJ2YXRpb25zVGltZXN0YW1wIGFzIG51bWJlcikgKiAxMDAwXG4gICAgICApO1xuICAgIHJldHVybiB7XG4gICAgICBhbnN3ZXI6IGFuc3dlcixcbiAgICAgIHJvdW5kSWQ6IHJvdW5kSWQsXG4gICAgICBvYnNlcnZhdGlvbnNUUzogb2JzZXJ2YXRpb25zVFMsXG4gICAgfSBhcyBSb3VuZDtcbiAgfVxufVxuIl19